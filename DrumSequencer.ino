/**
   Drum Sequencer (c) 2019, m47ch4n
*/

#include <I2CLiquidCrystal.h>
#include <Wire.h>
#define rep(i, n) for(int i = 0; i < (int)(n); i++)

const unsigned char hatSound[] PROGMEM = {
  0x81, 0x7E, 0x7F, 0x69, 0x93, 0x80, 0x8D, 0x81, 0x81, 0x91,
  0xAA, 0xB2, 0x7C, 0x99, 0x75, 0x74, 0x8F, 0x8E, 0x66, 0x8B,
  0x70, 0x79, 0x8D, 0x7F, 0x55, 0x51, 0x6F, 0x47, 0x86, 0x6C,
  0x86, 0x73, 0x7E, 0x8E, 0x98, 0xC7, 0x8A, 0xA2, 0x8B, 0x8B,
  0xA2, 0x7F, 0x8A, 0x7B, 0x64, 0x54, 0x66, 0x72, 0x6A, 0x4E,
  0x65, 0x6A, 0x5F, 0x8F, 0x77, 0x8A, 0x79, 0xAC, 0xBE, 0x98,
  0xD1, 0xBD, 0x9A, 0x71, 0x7F, 0x76, 0x5F, 0x7B, 0x66, 0x67,
  0x87, 0x7B, 0x7A, 0x5A, 0x73, 0xA2, 0x88, 0x95, 0x84, 0x96,
  0x8F, 0x6F, 0x85, 0x95, 0x87, 0x72, 0x73, 0x78, 0x71, 0x7C,
  0x76, 0x5E, 0x83, 0x8C, 0x93, 0x90, 0x6F, 0x87, 0x83, 0xA0,
  0x9A, 0x6E, 0x90, 0x5D, 0x69, 0x7D, 0x79, 0x94, 0x74, 0x87,
  0x98, 0x7A, 0x84, 0x77, 0x79, 0x72, 0x79, 0x93, 0x77, 0x8B,
  0x75, 0x7E, 0x88, 0x8A, 0x87, 0x79, 0x7F, 0x76, 0x7F, 0x82,
  0x78, 0x7D, 0x8C, 0x83, 0x7A, 0x80, 0x84, 0x7A, 0x7A, 0x82,
  0x84, 0x7B, 0x7F, 0x7D, 0x7A, 0x76, 0x7F, 0x88, 0x80, 0x7D,
  0x7B, 0x7D, 0x74, 0x7A, 0x86, 0x81, 0x85, 0x80, 0x80, 0x87,
  0x74, 0x87, 0x8D, 0x7A, 0x85, 0x78, 0x78, 0x86, 0x7D, 0x77,
  0x7B, 0x82, 0x7A, 0x81, 0x7F, 0x74, 0x83, 0x7E, 0x87, 0x8E,
  0x80, 0x93, 0x77, 0x7C, 0x86, 0x7E, 0x8F, 0x72, 0x7C, 0x75,
  0x79, 0x7B, 0x72, 0x83, 0x7D, 0x82, 0x88, 0x85, 0x7F, 0x83,
  0x85, 0x78, 0x80, 0x8C, 0x7E, 0x73, 0x7E, 0x72, 0x7A, 0x87,
  0x7E, 0x82, 0x82, 0x8A, 0x86, 0x82, 0x82, 0x7A, 0x7F, 0x8D,
  0x75, 0x7D, 0x85, 0x72, 0x71, 0x7A, 0x82, 0x7F, 0x83, 0x7C,
  0x84, 0x86, 0x82, 0x7E, 0x83, 0x86, 0x84, 0x80, 0x7C, 0x73,
  0x78, 0x7E, 0x70, 0x80, 0x80, 0x81, 0x89, 0x81, 0x84, 0x7E,
  0x7D, 0x80, 0x7B, 0x80, 0x83, 0x7D, 0x74, 0x7D, 0x82, 0x7D,
  0x81, 0x7E, 0x81, 0x87, 0x7F, 0x84, 0x7A, 0x7F, 0x87, 0x78,
  0x82, 0x83, 0x7D, 0x79, 0x7E, 0x79, 0x81, 0x80, 0x7D, 0x7B,
  0x7E, 0x8A, 0x7D, 0x80, 0x80, 0x80, 0x7F, 0x81, 0x81, 0x7D,
  0x7E, 0x76, 0x7B, 0x7F, 0x7F, 0x81, 0x7C, 0x84, 0x82, 0x81,
  0x80, 0x7C, 0x7F, 0x7F, 0x7F, 0x7D, 0x80, 0x7D, 0x7F, 0x7F,
  0x7B, 0x7F, 0x81, 0x7F, 0x81, 0x80, 0x7F, 0x80, 0x7D, 0x7E,
  0x7F, 0x81, 0x81, 0x7F, 0x81, 0x81, 0x7E, 0x7E, 0x7F, 0x7F,
  0x7F, 0x80, 0x7F, 0x7E, 0x80, 0x80, 0x7E, 0x7E, 0x80, 0x7F,
  0x80, 0x81, 0x7E, 0x7F, 0x7F, 0x7E, 0x7F, 0x81, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7F, 0x80, 0x7F, 0x7F,
  0x7F, 0x7F, 0x80, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7F, 0x7F,
  0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F };
const unsigned char snareSound[] PROGMEM = {
  0x80, 0x7E, 0x81, 0x7E, 0x82, 0x7D, 0x83, 0x7C, 0x84, 0x78,
  0xA7, 0xB6, 0xA7, 0x9C, 0xA3, 0x9A, 0x86, 0x8A, 0x5C, 0x6D,
  0x48, 0x63, 0x27, 0x38, 0x56, 0x0E, 0x31, 0x4F, 0x30, 0x32,
  0x46, 0x42, 0x62, 0x6D, 0xA6, 0x7A, 0x88, 0xC8, 0xD1, 0xC6,
  0xE7, 0xF8, 0xF2, 0xFF, 0xF4, 0xFA, 0xE9, 0xEA, 0xD9, 0xD7,
  0xBD, 0xBC, 0xB9, 0x9A, 0x82, 0x66, 0x70, 0x3D, 0x3C, 0x2A,
  0x15, 0x3E, 0x0B, 0x0D, 0x1E, 0x15, 0x14, 0x17, 0x13, 0x24,
  0x38, 0x30, 0x41, 0x40, 0x49, 0x56, 0x3F, 0x44, 0x59, 0x45,
  0x53, 0x55, 0x56, 0x69, 0x79, 0x7A, 0x86, 0xB1, 0xA3, 0xAF,
  0xB7, 0xBA, 0xDC, 0xD8, 0xDC, 0xE9, 0xF6, 0xFC, 0xFB, 0xFB,
  0xF9, 0xF8, 0xF6, 0xF4, 0xF3, 0xEF, 0xE6, 0xDA, 0xC9, 0xC2,
  0xC3, 0xB2, 0xAD, 0xAE, 0xAD, 0xAA, 0x99, 0x95, 0x8E, 0x87,
  0x7E, 0x67, 0x5C, 0x49, 0x31, 0x30, 0x20, 0x21, 0x20, 0x14,
  0x17, 0x18, 0x17, 0x15, 0x1C, 0x12, 0x0A, 0x06, 0x0B, 0x0C,
  0x11, 0x18, 0x1E, 0x26, 0x2C, 0x3D, 0x3F, 0x52, 0x57, 0x58,
  0x67, 0x70, 0x77, 0x86, 0x96, 0xA5, 0xC4, 0xD1, 0xCC, 0xD3,
  0xE7, 0xEE, 0xF5, 0xEC, 0xDC, 0xE0, 0xE3, 0xDD, 0xDC, 0xE0,
  0xD5, 0xD2, 0xDB, 0xAE, 0xAC, 0xBA, 0xBB, 0xB2, 0x82, 0x93,
  0xA0, 0x92, 0x8F, 0x9A, 0x82, 0x82, 0x6E, 0x6C, 0x79, 0x74,
  0x60, 0x54, 0x73, 0x45, 0x4B, 0x3C, 0x3B, 0x3E, 0x23, 0x18,
  0x1E, 0x30, 0x23, 0x38, 0x33, 0x4D, 0x40, 0x42, 0x55, 0x65,
  0x5A, 0x41, 0x79, 0x61, 0x59, 0x52, 0x7C, 0x76, 0x8F, 0x88,
  0x64, 0x8F, 0x69, 0x6A, 0x7E, 0x98, 0x7C, 0x92, 0x8D, 0x90,
  0x84, 0x8F, 0xA9, 0xA0, 0xB1, 0xAC, 0xB6, 0xBB, 0xCF, 0xB6,
  0xC7, 0xD1, 0xBD, 0xDA, 0xBF, 0xAB, 0xB6, 0xB4, 0xBC, 0x96,
  0xB0, 0xB0, 0xAB, 0xA9, 0x9F, 0x97, 0x7F, 0x98, 0x82, 0x66,
  0x78, 0x70, 0x6A, 0x6F, 0x4E, 0x56, 0x4A, 0x54, 0x67, 0x59,
  0x45, 0x4F, 0x44, 0x53, 0x6A, 0x47, 0x5F, 0x47, 0x33, 0x6C,
  0x44, 0x4A, 0x83, 0x4F, 0x50, 0x66, 0x52, 0x4D, 0x61, 0x4D,
  0x5B, 0x60, 0x5B, 0x6F, 0x5C, 0x80, 0x77, 0x70, 0xA2, 0x98,
  0x81, 0x9E, 0xB7, 0xB7, 0xBD, 0xC0, 0xCE, 0xDA, 0xC3, 0xD9,
  0xF1, 0xCF, 0xC3, 0xDF, 0xC4, 0xBC, 0xD6, 0xBA, 0xA6, 0xB3,
  0x9D, 0x92, 0x9F, 0x8C, 0x83, 0x65, 0x8D, 0x8F, 0x69, 0x77,
  0x7E, 0x61, 0x6B, 0x77, 0x47, 0x58, 0x56, 0x31, 0x72, 0x50,
  0x43, 0x5D, 0x3A, 0x47, 0x48, 0x56, 0x37, 0x64, 0x29, 0x42,
  0x41, 0x44, 0x5D, 0x31, 0x63, 0x49, 0x56, 0x5B, 0x5E, 0x60,
  0x8A, 0x6C, 0x6E, 0x96, 0x92, 0x89, 0x8B, 0xAA, 0x9F, 0x9A,
  0xAD, 0xAF, 0xBD, 0xB1, 0xAE, 0xBE, 0xDD, 0xA9, 0xB1, 0xD7,
  0x9F, 0xC0, 0xA0, 0xB0, 0xA9, 0xAB, 0xA8, 0x99, 0xA6, 0xA4,
  0x9F, 0x8A, 0x9C, 0x9E, 0x96, 0xA3, 0x8F, 0x8B, 0x8A, 0x69,
  0x98, 0x7E, 0x92, 0x79, 0x6F, 0x76, 0x4C, 0x78, 0x5A, 0x48,
  0x30, 0x4A, 0x48, 0x30, 0x53, 0x1E, 0x2A, 0x3A, 0x32, 0x44,
  0x3D, 0x39, 0x49, 0x4E, 0x44, 0x57, 0x5E, 0x5F, 0x6D, 0x69,
  0x72, 0x7E, 0x70, 0xA0, 0x78, 0xA8, 0xAC, 0x9D, 0xBA, 0x83,
  0xCB, 0xBE, 0xC1, 0xA0, 0xAC, 0xBC, 0xAE, 0xAA, 0xB3, 0xEE,
  0xAB, 0xB3, 0xBB, 0xB8, 0xBF, 0xA4, 0xB1, 0xA9, 0x95, 0x9F,
  0x99, 0x91, 0x92, 0x99, 0x81, 0x79, 0x7B, 0x71, 0x7C, 0x70,
  0x5B, 0x5C, 0x5B, 0x4F, 0x55, 0x4F, 0x48, 0x55, 0x64, 0x36,
  0x3C, 0x5A, 0x39, 0x4C, 0x5E, 0x4A, 0x60, 0x4C, 0x50, 0x5D,
  0x50, 0x6B, 0x63, 0x5B, 0x6B, 0x83, 0x62, 0x75, 0x8A, 0x8C,
  0x83, 0x6E, 0x98, 0x92, 0x8A, 0x97, 0x97, 0x81, 0xA6, 0x9F,
  0x96, 0xB8, 0xAF, 0xA4, 0xB5, 0xB2, 0xA3, 0xB4, 0xA5, 0xB2,
  0xB1, 0xA8, 0x9F, 0xB3, 0xA5, 0x9B, 0x9F, 0xA4, 0x9B, 0x9A,
  0x8C, 0x7B, 0x96, 0x79, 0x92, 0x7C, 0x6F, 0x71, 0x6B, 0x76,
  0x6D, 0x64, 0x61, 0x5F, 0x5C, 0x63, 0x52, 0x51, 0x69, 0x4F,
  0x4F, 0x5A, 0x5A, 0x68, 0x4E, 0x42, 0x56, 0x72, 0x65, 0x60,
  0x5F, 0x67, 0x80, 0x65, 0x62, 0x86, 0x74, 0x7D, 0x7C, 0x74,
  0xA4, 0x79, 0x8E, 0x9D, 0x6F, 0xA7, 0x93, 0x99, 0x8F, 0x9C,
  0x9A, 0x89, 0xA6, 0xA5, 0xBA, 0x9E, 0x97, 0xAC, 0xB1, 0x88,
  0xB5, 0xA7, 0x9D, 0x9A, 0x98, 0x92, 0x97, 0x9D, 0x84, 0xA1,
  0x7E, 0x99, 0x6F, 0x84, 0x8A, 0x66, 0x79, 0x77, 0x76, 0x6A,
  0x73, 0x5F, 0x64, 0x5B, 0x68, 0x6B, 0x58, 0x70, 0x51, 0x5A,
  0x6F, 0x65, 0x5A, 0x62, 0x69, 0x5A, 0x6F, 0x69, 0x6D, 0x5A,
  0x65, 0x71, 0x75, 0x81, 0x6D, 0x6E, 0x7A, 0x7C, 0x76, 0x7C,
  0x86, 0x80, 0x85, 0x82, 0x86, 0x9B, 0x7D, 0x97, 0x86, 0x9D,
  0x98, 0x89, 0xA2, 0x9E, 0x97, 0x8F, 0xAE, 0x93, 0xAE, 0x9D,
  0x94, 0xA1, 0x9D, 0x94, 0x9C, 0xA2, 0x8D, 0x89, 0x96, 0x94,
  0x88, 0x86, 0x82, 0x8C, 0x79, 0x8C, 0x6A, 0x79, 0x7D, 0x6D,
  0x75, 0x6C, 0x78, 0x74, 0x6D, 0x6C, 0x65, 0x6D, 0x78, 0x5F,
  0x65, 0x63, 0x72, 0x70, 0x58, 0x61, 0x6D, 0x66, 0x61, 0x6F,
  0x69, 0x55, 0x69, 0x74, 0x78, 0x6D, 0x7B, 0x78, 0x78, 0x7F,
  0x7D, 0x85, 0x86, 0x7F, 0x82, 0x9C, 0x80, 0x7E, 0x84, 0xA2,
  0x98, 0x9A, 0x84, 0x9C, 0xA3, 0x93, 0xA3, 0x8F, 0xAE, 0x9A,
  0x9A, 0x98, 0x8B, 0x99, 0x97, 0x99, 0x97, 0x85, 0x95, 0x93,
  0x89, 0x81, 0x9A, 0x7E, 0x7F, 0x8E, 0x65, 0x8D, 0x7D, 0x66,
  0x7C, 0x6F, 0x64, 0x79, 0x79, 0x5E, 0x66, 0x73, 0x5D, 0x64,
  0x6B, 0x65, 0x67, 0x71, 0x5D, 0x64, 0x6E, 0x63, 0x63, 0x67,
  0x7A, 0x68, 0x6B, 0x7B, 0x67, 0x76, 0x7F, 0x6F, 0x81, 0x75,
  0x83, 0x83, 0x85, 0x80, 0x8A, 0x89, 0x91, 0x91, 0x82, 0x9C,
  0x91, 0x93, 0x94, 0x9C, 0x8B, 0x9C, 0x8B, 0x9C, 0x9C, 0x94,
  0x9F, 0x8D, 0x9B, 0x86, 0xAA, 0x8D, 0x82, 0x97, 0x8B, 0x8E,
  0x85, 0x8B, 0x7F, 0x88, 0x84, 0x86, 0x7D, 0x80, 0x79, 0x74,
  0x82, 0x6F, 0x72, 0x7A, 0x73, 0x64, 0x72, 0x6E, 0x75, 0x66,
  0x62, 0x69, 0x66, 0x6D, 0x6D, 0x64, 0x5E, 0x6E, 0x75, 0x6D,
  0x6A, 0x6B, 0x6F, 0x76, 0x7A, 0x7D, 0x78, 0x80, 0x74, 0x7F,
};

const unsigned char kickSound[] PROGMEM = {
  0x80, 0x7F, 0x7E, 0x80, 0x7B, 0x7F, 0x77, 0x80, 0x6F, 0x78,
  0x70, 0x86, 0x6B, 0x8E, 0x83, 0x81, 0x2F, 0x3B, 0xC5, 0x5E,
  0x5E, 0x80, 0x67, 0x6C, 0x8B, 0x70, 0x96, 0x79, 0x9E, 0x8D,
  0x86, 0xC7, 0x8D, 0xBA, 0xC5, 0xAE, 0xCB, 0xC6, 0xBE, 0xDA,
  0xC4, 0xC7, 0xCD, 0xCF, 0xC4, 0xCC, 0xBE, 0xBC, 0xC4, 0xB2,
  0xB1, 0xA7, 0xA5, 0x8E, 0x8B, 0x91, 0x8D, 0x47, 0x4E, 0x74,
  0x5C, 0x4A, 0x19, 0x2A, 0x33, 0x26, 0x27, 0x1D, 0x19, 0x13,
  0x11, 0x0D, 0x0D, 0x0B, 0x0A, 0x0C, 0x0E, 0x1A, 0x1E, 0x1E,
  0x25, 0x28, 0x2D, 0x36, 0x3E, 0x40, 0x4A, 0x4F, 0x56, 0x5C,
  0x64, 0x6C, 0x76, 0x78, 0x83, 0x8E, 0x91, 0x9A, 0xA5, 0xB0,
  0xAB, 0xC0, 0xBE, 0xC1, 0xD2, 0xD5, 0xD8, 0xDF, 0xEB, 0xEB,
  0xEA, 0xEB, 0xED, 0xEE, 0xF1, 0xF3, 0xF3, 0xF2, 0xF4, 0xF2,
  0xF1, 0xEF, 0xED, 0xE9, 0xE8, 0xDE, 0xD4, 0xD4, 0xD0, 0xCB,
  0xC5, 0xBC, 0xB9, 0xB3, 0xAC, 0xA5, 0x9D, 0x96, 0x8F, 0x89,
  0x83, 0x7D, 0x75, 0x6F, 0x6A, 0x64, 0x5A, 0x56, 0x50, 0x44,
  0x44, 0x3F, 0x2C, 0x30, 0x30, 0x19, 0x1D, 0x24, 0x0B, 0x0E,
  0x14, 0x04, 0x09, 0x0B, 0x07, 0x06, 0x05, 0x06, 0x05, 0x05,
  0x06, 0x08, 0x09, 0x0C, 0x10, 0x11, 0x16, 0x21, 0x21, 0x25,
  0x2A, 0x31, 0x35, 0x37, 0x43, 0x46, 0x4B, 0x53, 0x5A, 0x5E,
  0x65, 0x6D, 0x71, 0x77, 0x7F, 0x83, 0x88, 0x90, 0x95, 0x9B,
  0x9F, 0xA5, 0xAB, 0xAB, 0xB1, 0xB8, 0xB9, 0xC0, 0xC3, 0xC3,
  0xC8, 0xD0, 0xCE, 0xCF, 0xDA, 0xD4, 0xD3, 0xDD, 0xE1, 0xDD,
  0xDF, 0xE0, 0xDF, 0xDC, 0xDF, 0xDD, 0xDF, 0xDF, 0xD9, 0xDC,
  0xD4, 0xD7, 0xD8, 0xD5, 0xCF, 0xD0, 0xCD, 0xC7, 0xC9, 0xC8,
  0xC2, 0xBD, 0xB7, 0xB6, 0xB4, 0xB0, 0xAE, 0xA8, 0xA5, 0xA0,
  0x9D, 0x9B, 0x98, 0x93, 0x8C, 0x8A, 0x89, 0x83, 0x83, 0x7E,
  0x7A, 0x7A, 0x6F, 0x75, 0x77, 0x6A, 0x65, 0x6A, 0x60, 0x5C,
  0x62, 0x5B, 0x5C, 0x5A, 0x56, 0x52, 0x53, 0x55, 0x51, 0x4E,
  0x50, 0x4E, 0x49, 0x4E, 0x4F, 0x4E, 0x4C, 0x4A, 0x4C, 0x4D,
  0x50, 0x4B, 0x4B, 0x4B, 0x4B, 0x4C, 0x4C, 0x4B, 0x4A, 0x4A,
  0x4B, 0x49, 0x46, 0x49, 0x44, 0x45, 0x46, 0x42, 0x41, 0x44,
  0x40, 0x40, 0x42, 0x3E, 0x3C, 0x3E, 0x3E, 0x3D, 0x41, 0x3A,
  0x3C, 0x3F, 0x3F, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x4A,
  0x4A, 0x4D, 0x4F, 0x52, 0x56, 0x56, 0x5B, 0x5E, 0x61, 0x66,
  0x69, 0x6C, 0x71, 0x73, 0x77, 0x7D, 0x81, 0x83, 0x87, 0x8B,
  0x90, 0x93, 0x97, 0x9B, 0x9F, 0xA3, 0xA7, 0xAA, 0xAE, 0xB2,
  0xB5, 0xB8, 0xBD, 0xBF, 0xC2, 0xC6, 0xC7, 0xCC, 0xCF, 0xD3,
  0xD4, 0xD6, 0xD9, 0xD9, 0xDE, 0xE0, 0xE5, 0xE2, 0xE2, 0xE4,
  0xE0, 0xE5, 0xE5, 0xE4, 0xE5, 0xE3, 0xE0, 0xE0, 0xDE, 0xDD,
  0xDB, 0xDB, 0xD9, 0xD4, 0xD1, 0xD1, 0xCF, 0xC9, 0xC6, 0xC0,
  0xBD, 0xB9, 0xB4, 0xB1, 0xAC, 0xA7, 0xA0, 0x9B, 0x99, 0x91,
  0x8C, 0x89, 0x83, 0x7E, 0x7A, 0x74, 0x6F, 0x6C, 0x66, 0x62,
  0x5E, 0x5A, 0x55, 0x52, 0x4E, 0x4B, 0x48, 0x45, 0x42, 0x3F,
  0x3D, 0x3C, 0x3C, 0x39, 0x36, 0x35, 0x35, 0x34, 0x34, 0x33,
  0x33, 0x36, 0x33, 0x32, 0x35, 0x36, 0x38, 0x36, 0x37, 0x3D,
  0x3B, 0x3C, 0x3F, 0x41, 0x43, 0x47, 0x47, 0x4B, 0x4E, 0x4E,
  0x52, 0x54, 0x57, 0x5A, 0x5C, 0x5F, 0x63, 0x66, 0x68, 0x6B,
  0x6D, 0x71, 0x74, 0x76, 0x79, 0x7B, 0x7E, 0x81, 0x83, 0x86,
  0x88, 0x8B, 0x8D, 0x8E, 0x91, 0x93, 0x95, 0x97, 0x98, 0x99,
  0x9B, 0x9C, 0x9D, 0x9F, 0x9F, 0x9F, 0xA1, 0xA1, 0xA1, 0xA2,
  0xA1, 0xA1, 0xA2, 0xA2, 0xA1, 0xA0, 0xA0, 0xA0, 0x9F, 0x9E,
  0x9E, 0x9D, 0x9C, 0x9C, 0x9B, 0x99, 0x99, 0x97, 0x96, 0x96,
  0x95, 0x93, 0x92, 0x91, 0x90, 0x8F, 0x8D, 0x8D, 0x8C, 0x8A,
  0x8A, 0x89, 0x87, 0x86, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81,
  0x80, 0x80, 0x7F, 0x7E, 0x7D, 0x7C, 0x7C, 0x7C, 0x7B, 0x7B,
  0x7A, 0x7A, 0x7A, 0x7A, 0x7A, 0x79, 0x7A, 0x7A, 0x7A, 0x7A,
  0x7A, 0x7A, 0x7B, 0x7B, 0x7B, 0x7C, 0x7C, 0x7C, 0x7D, 0x7D,
  0x7D, 0x7E, 0x7E, 0x7F, 0x7F, 0x80, 0x80, 0x80, 0x81, 0x81,
  0x81, 0x82, 0x82, 0x82, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x83, 0x83, 0x83, 0x83, 0x82,
  0x82, 0x82, 0x81, 0x81, 0x81, 0x80, 0x80, 0x7F, 0x7F, 0x7F,
  0x7E, 0x7E, 0x7D, 0x7D, 0x7C, 0x7C, 0x7C, 0x7C, 0x7B, 0x7B,
  0x7B, 0x7A, 0x7A, 0x7A, 0x7A, 0x79, 0x79, 0x79, 0x79, 0x79,
  0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79,
  0x79, 0x7A, 0x7A, 0x7A, 0x7A, 0x7B, 0x7B, 0x7B, 0x7B, 0x7B,
  0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
  0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E, 0x7E, 0x7E,
  0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0x82,
  0x82, 0x82, 0x82, 0x82, 0x82, 0x83, 0x83, 0x83, 0x83, 0x83,
  0x83, 0x83, 0x83, 0x83, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x85,
  0x84, 0x85, 0x85, 0x85, 0x85, 0x84, 0x84, 0x84, 0x84, 0x84,
  0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x83, 0x83, 0x83, 0x83,
  0x83, 0x83, 0x82, 0x82, 0x82, 0x82, 0x82, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7F, 0x7F,
  0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
  0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
  0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
  0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
  0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
  0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
  0x7F, 0x7F, 0x7F, };

const unsigned int hatSize = sizeof(hatSound) / sizeof(hatSound[0]);
const unsigned int snareSize = sizeof(snareSound) / sizeof(snareSound[0]);
const unsigned int kickSize = sizeof(kickSound) / sizeof(kickSound[0]);
const unsigned char *sounds[] = {nullptr, hatSound, snareSound, nullptr, kickSound, nullptr, nullptr, nullptr};
const unsigned int sizes[] = {NULL, hatSize, snareSize, NULL, kickSize, NULL, NULL, NULL};

I2CLiquidCrystal lcd(63, (bool)true);
unsigned char speakerPin = 11;
unsigned char modePin = 7;
unsigned char trackPin = 6;
unsigned char setPins[4] = {5, 4, 3, 2};
unsigned char ledPins[4] = {13, 12, 10, 9};

bool modeClick;
bool trackClick;
bool setClicks[4];

unsigned char modeIndex;
enum Mode {
  setHat,
  setSnare,
  setKick,
  setBpm,
  play
} mode;

unsigned char bpm;
unsigned char track[16];
bool hatTrack[16];
bool snareTrack[16];
bool kickTrack[16];
bool bpmBits[8];
bool *nowTrack;
bool *tracks[] = {hatTrack, snareTrack, kickTrack};
unsigned char trackPos;
float soundOffset;
const char *soundToken[] = {" ", "ﾊ", "ｽ", "ﾌ", "ｷ", "ﾋ", "ｼ", "ﾝ"};

void setup() {
  lcd.begin(16, 2);
  lcd.cursor();
  pinMode(speakerPin, OUTPUT);
  pinMode(modePin, INPUT);
  pinMode(trackPin, INPUT);
  rep(i, 4) {
    pinMode(setPins[i], INPUT);
    pinMode(ledPins[i], OUTPUT);
  }

  TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS00);

  trackPos = 0;
  bpm = 120;
  num2bit(bpmBits, bpm);

  // Initialize mode to setHat
  mode = setHat;
  modeIndex = static_cast<int>(mode);
  playSound(sounds[1], sizes[1]);
  printSetDisp();
}

void loop() {
  updateClicks();

  if (modeClick) {
    modeIndex = ++modeIndex % 5;
    mode = static_cast<enum Mode>(modeIndex);
    trackPos = 0;
  }

  switch (mode) {
    case setHat: case setSnare: case setKick:
      nowTrack = tracks[modeIndex] + 4 * trackPos;
      setTrackMode();
      break;
    case setBpm:
      nowTrack = bpmBits + 4 * trackPos;
      setBpmMode();
      break;
    case play:
      playMode();
      break;
  }
}
